diff -urN zeek-orig/src/IP.h zeek-new/src/IP.h
--- zeek-orig/src/IP.h	2021-06-04 08:53:00.924002712 +0200
+++ zeek-new/src/IP.h	2021-06-04 18:25:47.050645969 +0200
@@ -518,6 +518,12 @@
 		{ return ip4 ? 0 : (ntohl(ip6->ip6_flow) & 0x000fffff); }
 
 	/**
+	 * Returns value of the Traffic Class for IPv6, Type of Service for IPv4.
+	 */
+	unsigned char ToS() const
+	{ return ip4 ? ip4->ip_tos : (ntohl(ip6->ip6_flow) & 0x0ff00000) >> 20; }
+
+	/**
 	 * Returns number of IP headers in packet (includes IPv6 extension headers).
 	 */
 	size_t NumHeaders() const
diff -urN zeek-orig/src/packet_analysis/protocol/ip/CMakeLists.txt zeek-new/src/packet_analysis/protocol/ip/CMakeLists.txt
--- zeek-orig/src/packet_analysis/protocol/ip/CMakeLists.txt	2021-06-04 08:53:01.016002248 +0200
+++ zeek-new/src/packet_analysis/protocol/ip/CMakeLists.txt	2021-06-04 18:23:58.187197912 +0200
@@ -3,6 +3,7 @@
 
 include_directories(BEFORE ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_BINARY_DIR})
 
-zeek_plugin_begin(PacketAnalyzer IP)
+zeek_plugin_begin(Zeek IP)
 zeek_plugin_cc(IP.cc IPBasedAnalyzer.cc SessionAdapter.cc Plugin.cc)
+zeek_plugin_bif(events.bif)
 zeek_plugin_end()
diff -urN zeek-orig/src/packet_analysis/protocol/ip/events.bif zeek-new/src/packet_analysis/protocol/ip/events.bif
--- zeek-orig/src/packet_analysis/protocol/ip/events.bif	1970-01-01 01:00:00.000000000 +0100
+++ zeek-new/src/packet_analysis/protocol/ip/events.bif	2021-06-04 18:23:32.007330634 +0200
@@ -0,0 +1,14 @@
+## Generated for IP packets.
+## 
+## WARNING!!! This is likely to overkill Zeek and it is only intended
+## to compare it with alternative implementations.
+##
+## c: The connection the packet belongs to
+##
+## fl: The Flow Label of an IPv6 packet
+##
+## tos: The TOS/DSCP packet for an IPv4/6 packet, respectively
+## 
+## ttl: The TTL/HL field for an IPv4/6 packet, respectively
+##
+event ip_packet%(fl: count, tos: count, ttl: count%);
diff -urN zeek-orig/src/packet_analysis/protocol/ip/IP.cc zeek-new/src/packet_analysis/protocol/ip/IP.cc
--- zeek-orig/src/packet_analysis/protocol/ip/IP.cc	2021-06-04 08:53:01.016002248 +0200
+++ zeek-new/src/packet_analysis/protocol/ip/IP.cc	2021-06-04 18:24:31.275030166 +0200
@@ -11,6 +11,7 @@
 #include "zeek/Event.h"
 #include "zeek/TunnelEncapsulation.h"
 #include "zeek/IPAddr.h"
+#include "zeek/packet_analysis/protocol/ip/events.bif.h"
 
 using namespace zeek::packet_analysis::IP;
 
@@ -219,6 +220,10 @@
 		}
 #endif
 
+	if ( ip_packet ) {
+		event_mgr.Enqueue(ip_packet, zeek::val_mgr->Count(packet->ip_hdr->FlowLabel()), zeek::val_mgr->Count(packet->ip_hdr->ToS()), zeek::val_mgr->Count(packet->ip_hdr->TTL()));
+	}
+
 	// Set the data pointer to match the payload from the IP header. This makes sure that it's also pointing
 	// at the reassembled data for a fragmented packet.
 	data = packet->ip_hdr->Payload();
